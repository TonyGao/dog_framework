{% extends "base.html.twig" %}

{% block javascripts %}
  {{ parent() }}
  <script>
    $(document).ready(function () {
      $("input.ef-input.number").on("input", function() {
        if (numOject.isInteger($(this))) {
          $(this).val($(this).val().replace(/[^0-9]/g, '').replace(/(\..*)\./g, '$1'));
        }

        if (!numOject.isInteger($(this))) {
          $(this).val($(this).val().replace(/[^0-9.]/g, '').replace(/(\..*)\./g, '$1'));
        }
      })

      $("input.ef-input.number").on("focusout", function() {
        numOject.modify($(this));
      })

      $(".ef-input-number-step-button.add").on("click", function() {
        let input = $(this).closest(".ef-input-number").find("input.ef-input.number");
        numOject.modify(input, 'add');
      })

      $(".ef-input-number-step-button.subtract").on("click", function() {
        let input = $(this).closest(".ef-input-number").find("input.ef-input.number");
        numOject.modify(input, 'subtract');
      })

      let numOject = {
        getMaxNum: function(input) {
          let maxNum = input.attr('num-valuemax');
          return Number(maxNum);
        },
        getMinNum: function(input) {
          let minNum = input.attr('num-valuemin');
          return Number(minNum);
        },
        getStepNum: function(input) {
          let step = input.attr('step');
          return Number(step);
        },
        isInteger: function(input) {
          let isInteger = input.attr('isInteger');
          if (isInteger == 'true') {
            return true;
          }

          if (isInteger == 'false') {
            return false;
          }
        },
        getPrecision: function(input) {
          let precision = input.attr('precision');
          return Number(precision);
        },
        modify: function(input, type) {
          if (input.val() !== '') {
            let step = numOject.getStepNum(input);
            let min = numOject.getMinNum(input);
            let max = numOject.getMaxNum(input);
            let precision = numOject.getPrecision(input);

            step = step ? step : 1;
            if (numOject.isInteger(input)) {
              step = Number(step.toFixed(0));
            }

            let num = Number(input.val());
            if (type == "add") {
              num = num + step;
            }

            if (type == 'subtract') {
              num = num - step;
            }

            if (!isNaN(max)) {
              if (num > max) {
                num = max;
              }
            }

            if (!isNaN(min)) {
              if (num < min) {
                num = min;
              }
            }

            if (!isNaN(precision)) {
              num = num.toFixed(precision);
            }

            input.val(num);
          }
        },

      }
    })
  </script>
{% endblock %}

{% block body %}
	  <span class="ef-input-wrapper ef-input-number ef-input-number-mode-embed ef-input-number-size-medium input-demo" style="width: 320px;">
      <input role="spinbutton"
        num-valuemax="100"
        num-valuemin="0"
        num-value=""
        step="1.5"
        precision="3"
        class="ef-input ef-input-size-medium number"
        type="text"
        placeholder="Please Enter"
      >
        <span class="ef-input-suffix">
          <div class="ef-input-number-step">
            <button class="ef-input-number-step-button add" type="button" tabindex="-1">
              <svg viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg" stroke="currentColor" class="ef-icon ef-icon-up" stroke-width="4" stroke-linecap="butt" stroke-linejoin="miter"><path d="M39.6 30.557 24.043 15 8.487 30.557"></path></svg>
            </button>
            <button class="ef-input-number-step-button subtract" type="button" tabindex="-1">
              <svg viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg" stroke="currentColor" class="ef-icon ef-icon-down" stroke-width="4" stroke-linecap="butt" stroke-linejoin="miter"><path d="M39.6 17.443 24.043 33 8.487 17.443"></path></svg>
            </button>
          </div>
        </span>
      </span>
{% endblock %}
