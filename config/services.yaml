parameters:
    app.key_debug: '%env(KEY_DEBUG)%'
    page_limit: 12
    # 缓存监听器配置
    app.cache_watched_entities:
        - 'App\Entity\Organization\Position'
        - 'App\Entity\Organization\Department'
        - 'App\Entity\Organization\Company'
        # 可以继续添加其他需要监听的实体
    entity_gen_stuff:
        use_imports:
            - 'App\Entity\Traits\CommonTrait'
            - 'Doctrine\ORM\Mapping as ORM'
            - 'Symfony\Component\Uid\Uuid'
            - 'Gedmo\Mapping\Annotation as Gedmo'
        base:
            entity: 'Doctrine\ORM\Mapping\Entity'
            table: 'Doctrine\ORM\Mapping\Table'
            lifecircle: 'Doctrine\ORM\Mapping\HasLifecycleCallbacks'
            commonTrait: 'App\Entity\Traits\CommonTrait'
            generatedId: 'Doctrine\ORM\Mapping\Id'
            ID: 'Doctrine\ORM\Mapping\Column(type: "uuid", unique: true)'


services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Lib'
            - '../src/Kernel.php'
    App\Asset\EfVersioningStrategy:
        arguments:
            - '%kernel.environment%'
            - '%env(APP_VERSION)%'
    App\Command\EfInitAdminMenuCommand:
        arguments:
            - '%app.admin_menu%'
    App\Repository\:
        resource: '../src/Repository'
        autowire: true
        tags: ['doctrine.repository_service']
    App\Serializer\Serializer:
        arguments:
            - ['api']
    App\Twig\TwigExtension:
        tags: ['twig.extension']
    #     arguments:
    #         $sessionFactory: '@session.factory'
    App\Service\Utils\AlimtTranslationService:
        arguments:
            $alimtConfig: '%alimt%'
    App\Service\FileResolver:
        arguments:
            $projectDir: '%kernel.project_dir%'
    App\Service\Entity\EntityService:
        arguments:
            $projectDir: '%kernel.project_dir%'
    App\Doctrine\CustomNamingStrategy: '@doctrine.orm.naming_strategy.default'
    App\Service\Controller\Common: ~
    App\EventListener\Controller\AutoInjectCommonListener:
        arguments:
            $c: '@App\Service\Controller\Common'
        tags:
            - { name: kernel.event_listener, event: kernel.controller, method: onKernelController }
    App\Service\Entity\MigrationService:
        arguments:
            $projectDir: '%kernel.project_dir%'
    App\EventSubscriber\Init\HeaderStateSubscriber:
        tags:
            - { name: kernel.event_subscriber }
    App\Service\Platform\MenuStaticGenerator:
        arguments:
            $em: '@doctrine.orm.entity_manager'
            $twig: '@twig'
            $codeFormatterService: '@App\Service\Platform\CodeFormatterService'
            $projectDir: '%kernel.project_dir%'
    App\Service\Platform\CodeFormatterService:
        arguments:
            $formatters:
                php-cs-fixer: '%kernel.project_dir%/vendor/bin/php-cs-fixer fix'
                prettier: '%kernel.project_dir%/node_modules/.bin/prettier --write'
                twigcs: '%kernel.project_dir%/vendor/bin/twigcs'
    # 批量注册所有 Faker Provider
    App\Lib\DataFixtures\Faker\Provider\:
        resource: '../src/Lib/DataFixtures/Faker/Provider/'
        tags: ['hautelook_alice.provider']
    App\Service\Platform\ParameterService:
        arguments:
            $parameterBag: '@parameter_bag'
    # Profiler插件 资源重复 collector
    App\DataCollector\AssetDuplicationCollector:
        arguments:
            $twigCollector: '@data_collector.twig'
        tags:
            - { name: data_collector, template: '@App/profiler/asset_duplication.html.twig', id: app.asset_duplication_collector }
    
    # 通用实体缓存监听器
    App\EventListener\Entity\UniversalEntityCacheListener:
        arguments:
            $dataGridService: '@App\Service\Platform\DataGridService'
            $watchedEntities: '%app.cache_watched_entities%'
        tags:
            - { name: doctrine.event_listener, event: postPersist }
            - { name: doctrine.event_listener, event: postUpdate }
            - { name: doctrine.event_listener, event: postRemove }

    # 将 DataGridService 设为 public，用于测试
    App\Service\Platform\DataGridService:
        public: true

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
